// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "github.com/97vaibhav/Vessel_tracking/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// VesselRepository is an autogenerated mock type for the VesselRepository type
type VesselRepository struct {
	mock.Mock
}

// CreateVessel provides a mock function with given fields: vessel
func (_m *VesselRepository) CreateVessel(vessel *model.Vessel) (int64, error) {
	ret := _m.Called(vessel)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Vessel) (int64, error)); ok {
		return rf(vessel)
	}
	if rf, ok := ret.Get(0).(func(*model.Vessel) int64); ok {
		r0 = rf(vessel)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Vessel) error); ok {
		r1 = rf(vessel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoyage provides a mock function with given fields: voyage
func (_m *VesselRepository) CreateVoyage(voyage *model.Voyage) (int64, error) {
	ret := _m.Called(voyage)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Voyage) (int64, error)); ok {
		return rf(voyage)
	}
	if rf, ok := ret.Get(0).(func(*model.Voyage) int64); ok {
		r0 = rf(voyage)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Voyage) error); ok {
		r1 = rf(voyage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVessel provides a mock function with given fields: _a0
func (_m *VesselRepository) GetVessel(_a0 model.VesselID) (*model.Vessel, error) {
	ret := _m.Called(_a0)

	var r0 *model.Vessel
	var r1 error
	if rf, ok := ret.Get(0).(func(model.VesselID) (*model.Vessel, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.VesselID) *model.Vessel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vessel)
		}
	}

	if rf, ok := ret.Get(1).(func(model.VesselID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVessels provides a mock function with given fields:
func (_m *VesselRepository) GetVessels() ([]*model.Vessel, error) {
	ret := _m.Called()

	var r0 []*model.Vessel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Vessel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Vessel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Vessel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoyage provides a mock function with given fields: _a0, _a1
func (_m *VesselRepository) GetVoyage(_a0 model.VoyageID, _a1 model.VesselID) (*model.Voyage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Voyage
	var r1 error
	if rf, ok := ret.Get(0).(func(model.VoyageID, model.VesselID) (*model.Voyage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(model.VoyageID, model.VesselID) *model.Voyage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voyage)
		}
	}

	if rf, ok := ret.Get(1).(func(model.VoyageID, model.VesselID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVessel provides a mock function with given fields: vessel
func (_m *VesselRepository) UpdateVessel(vessel *model.Vessel) (*model.Vessel, error) {
	ret := _m.Called(vessel)

	var r0 *model.Vessel
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Vessel) (*model.Vessel, error)); ok {
		return rf(vessel)
	}
	if rf, ok := ret.Get(0).(func(*model.Vessel) *model.Vessel); ok {
		r0 = rf(vessel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Vessel)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Vessel) error); ok {
		r1 = rf(vessel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoyage provides a mock function with given fields: voyage
func (_m *VesselRepository) UpdateVoyage(voyage *model.Voyage) (*model.Voyage, error) {
	ret := _m.Called(voyage)

	var r0 *model.Voyage
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Voyage) (*model.Voyage, error)); ok {
		return rf(voyage)
	}
	if rf, ok := ret.Get(0).(func(*model.Voyage) *model.Voyage); ok {
		r0 = rf(voyage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voyage)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Voyage) error); ok {
		r1 = rf(voyage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVesselRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewVesselRepository creates a new instance of VesselRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVesselRepository(t mockConstructorTestingTNewVesselRepository) *VesselRepository {
	mock := &VesselRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
