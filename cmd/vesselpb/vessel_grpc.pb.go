// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vesselpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VesselServiceClient is the client API for VesselService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VesselServiceClient interface {
	CreateVessel(ctx context.Context, in *CreateVesselRequest, opts ...grpc.CallOption) (*CreateVesselResponse, error)
	GetVessels(ctx context.Context, in *GetVesselsRequest, opts ...grpc.CallOption) (*GetVesselsResponse, error)
	GetVessel(ctx context.Context, in *GetVesselRequest, opts ...grpc.CallOption) (*GetVesselResponse, error)
	UpdateVessel(ctx context.Context, in *UpdateVesselRequest, opts ...grpc.CallOption) (*UpdateVesselResponse, error)
	CreateVoyage(ctx context.Context, in *CreateVoyageRequest, opts ...grpc.CallOption) (*CreateVoyageResponse, error)
	GetVoyage(ctx context.Context, in *GetVoyageRequest, opts ...grpc.CallOption) (*GetVoyageResponse, error)
	UpdateVoyage(ctx context.Context, in *UpdateVoyageRequest, opts ...grpc.CallOption) (*UpdateVoyageResponse, error)
}

type vesselServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVesselServiceClient(cc grpc.ClientConnInterface) VesselServiceClient {
	return &vesselServiceClient{cc}
}

func (c *vesselServiceClient) CreateVessel(ctx context.Context, in *CreateVesselRequest, opts ...grpc.CallOption) (*CreateVesselResponse, error) {
	out := new(CreateVesselResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/CreateVessel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) GetVessels(ctx context.Context, in *GetVesselsRequest, opts ...grpc.CallOption) (*GetVesselsResponse, error) {
	out := new(GetVesselsResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/GetVessels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) GetVessel(ctx context.Context, in *GetVesselRequest, opts ...grpc.CallOption) (*GetVesselResponse, error) {
	out := new(GetVesselResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/GetVessel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) UpdateVessel(ctx context.Context, in *UpdateVesselRequest, opts ...grpc.CallOption) (*UpdateVesselResponse, error) {
	out := new(UpdateVesselResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/UpdateVessel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) CreateVoyage(ctx context.Context, in *CreateVoyageRequest, opts ...grpc.CallOption) (*CreateVoyageResponse, error) {
	out := new(CreateVoyageResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/CreateVoyage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) GetVoyage(ctx context.Context, in *GetVoyageRequest, opts ...grpc.CallOption) (*GetVoyageResponse, error) {
	out := new(GetVoyageResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/GetVoyage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vesselServiceClient) UpdateVoyage(ctx context.Context, in *UpdateVoyageRequest, opts ...grpc.CallOption) (*UpdateVoyageResponse, error) {
	out := new(UpdateVoyageResponse)
	err := c.cc.Invoke(ctx, "/cmd.VesselService/UpdateVoyage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VesselServiceServer is the server API for VesselService service.
// All implementations must embed UnimplementedVesselServiceServer
// for forward compatibility
type VesselServiceServer interface {
	CreateVessel(context.Context, *CreateVesselRequest) (*CreateVesselResponse, error)
	GetVessels(context.Context, *GetVesselsRequest) (*GetVesselsResponse, error)
	GetVessel(context.Context, *GetVesselRequest) (*GetVesselResponse, error)
	UpdateVessel(context.Context, *UpdateVesselRequest) (*UpdateVesselResponse, error)
	CreateVoyage(context.Context, *CreateVoyageRequest) (*CreateVoyageResponse, error)
	GetVoyage(context.Context, *GetVoyageRequest) (*GetVoyageResponse, error)
	UpdateVoyage(context.Context, *UpdateVoyageRequest) (*UpdateVoyageResponse, error)
	mustEmbedUnimplementedVesselServiceServer()
}

// UnimplementedVesselServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVesselServiceServer struct {
}

func (UnimplementedVesselServiceServer) CreateVessel(context.Context, *CreateVesselRequest) (*CreateVesselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVessel not implemented")
}
func (UnimplementedVesselServiceServer) GetVessels(context.Context, *GetVesselsRequest) (*GetVesselsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVessels not implemented")
}
func (UnimplementedVesselServiceServer) GetVessel(context.Context, *GetVesselRequest) (*GetVesselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVessel not implemented")
}
func (UnimplementedVesselServiceServer) UpdateVessel(context.Context, *UpdateVesselRequest) (*UpdateVesselResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVessel not implemented")
}
func (UnimplementedVesselServiceServer) CreateVoyage(context.Context, *CreateVoyageRequest) (*CreateVoyageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoyage not implemented")
}
func (UnimplementedVesselServiceServer) GetVoyage(context.Context, *GetVoyageRequest) (*GetVoyageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoyage not implemented")
}
func (UnimplementedVesselServiceServer) UpdateVoyage(context.Context, *UpdateVoyageRequest) (*UpdateVoyageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoyage not implemented")
}
func (UnimplementedVesselServiceServer) mustEmbedUnimplementedVesselServiceServer() {}

// UnsafeVesselServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VesselServiceServer will
// result in compilation errors.
type UnsafeVesselServiceServer interface {
	mustEmbedUnimplementedVesselServiceServer()
}

func RegisterVesselServiceServer(s grpc.ServiceRegistrar, srv VesselServiceServer) {
	s.RegisterService(&VesselService_ServiceDesc, srv)
}

func _VesselService_CreateVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).CreateVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/CreateVessel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).CreateVessel(ctx, req.(*CreateVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_GetVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).GetVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/GetVessels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).GetVessels(ctx, req.(*GetVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_GetVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).GetVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/GetVessel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).GetVessel(ctx, req.(*GetVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_UpdateVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).UpdateVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/UpdateVessel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).UpdateVessel(ctx, req.(*UpdateVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_CreateVoyage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoyageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).CreateVoyage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/CreateVoyage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).CreateVoyage(ctx, req.(*CreateVoyageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_GetVoyage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoyageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).GetVoyage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/GetVoyage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).GetVoyage(ctx, req.(*GetVoyageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VesselService_UpdateVoyage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoyageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VesselServiceServer).UpdateVoyage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmd.VesselService/UpdateVoyage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VesselServiceServer).UpdateVoyage(ctx, req.(*UpdateVoyageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VesselService_ServiceDesc is the grpc.ServiceDesc for VesselService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VesselService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmd.VesselService",
	HandlerType: (*VesselServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVessel",
			Handler:    _VesselService_CreateVessel_Handler,
		},
		{
			MethodName: "GetVessels",
			Handler:    _VesselService_GetVessels_Handler,
		},
		{
			MethodName: "GetVessel",
			Handler:    _VesselService_GetVessel_Handler,
		},
		{
			MethodName: "UpdateVessel",
			Handler:    _VesselService_UpdateVessel_Handler,
		},
		{
			MethodName: "CreateVoyage",
			Handler:    _VesselService_CreateVoyage_Handler,
		},
		{
			MethodName: "GetVoyage",
			Handler:    _VesselService_GetVoyage_Handler,
		},
		{
			MethodName: "UpdateVoyage",
			Handler:    _VesselService_UpdateVoyage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vessel.proto",
}
